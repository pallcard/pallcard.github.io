<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>并发 on 刘科个人博客</title>
    <link>https://pallcard.github.io/tags/%E5%B9%B6%E5%8F%91/</link>
    <description>Recent content in 并发 on 刘科个人博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <copyright>All rights reserved - 2019</copyright>
    <lastBuildDate>Wed, 07 Aug 2019 23:22:27 +0800</lastBuildDate>
    
	<atom:link href="https://pallcard.github.io/tags/%E5%B9%B6%E5%8F%91/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Java并发工具包</title>
      <link>https://pallcard.github.io/2019/java%E5%B9%B6%E5%8F%91%E5%B7%A5%E5%85%B7%E5%8C%85/</link>
      <pubDate>Wed, 07 Aug 2019 23:22:27 +0800</pubDate>
      
      <guid>https://pallcard.github.io/2019/java%E5%B9%B6%E5%8F%91%E5%B7%A5%E5%85%B7%E5%8C%85/</guid>
      <description>引言 JDK并发包中提供了CountDownLatch、CyclicBarrier、Semaphore工具类来实现并发流程的控制。 Exchanger提供了线程间交换数据的方法。
join()方法 需求：实现主程序要等待其他线程完成后，在继续执行。很容易想到使用join()方法来实现。
public class JoinCountDownLatchTest { public static void main(String[] args) throws InterruptedException { Thread thread1 = new Thread(() -&amp;gt; { System.out.println(&amp;quot;执行1&amp;quot;); }); Thread thread2 = new Thread(() -&amp;gt; { System.out.println(&amp;quot;执行2&amp;quot;); }); thread1.start(); thread2.start(); thread1.join(); thread2.join(); System.out.println(&amp;quot;主线程&amp;quot;); } } /* 输出结果： 执行1 执行2 主线程 */  join()原理是不停的检查join线程是否存活，直到join线程都中止，线程才会this.notifyAll()。
CountDownLatch类 public class CountDownLatchTest { public static void main(String[] args) throws InterruptedException { CountDownLatch countDownLatch = new CountDownLatch(2); Thread thread1 = new Thread(() -&amp;gt; { System.</description>
    </item>
    
    <item>
      <title>Volatile和synchronized</title>
      <link>https://pallcard.github.io/2019/volatile%E5%92%8Csynchronized/</link>
      <pubDate>Wed, 07 Aug 2019 21:20:13 +0800</pubDate>
      
      <guid>https://pallcard.github.io/2019/volatile%E5%92%8Csynchronized/</guid>
      <description>volatile volatile是轻量级的synchronized，它可以在并发中保证共享变量的可见性
原理 volatile变量进行写操作时，JVM会向处理器发送一条Lock前缀的指令，将这个变量所在的缓存行写回到系统内存中。 为了保证缓存一致性，每个处理器会通过嗅探在总线上传播的数据来检查自己缓存的值是不是过期了，当处理器发现自己 缓存行对应的内存地址被修改了，就会将当前处理器的缓存行失效，当处理器要对这个数据进行操作时，就会重新从系统内存 中把数据读取到缓存中。
 Lock前缀指令会引起处理器缓存回写到内存。
 一个处理器到缓存回写到内存回导致其他处理器缓存失效。（处理器使用嗅探技术保证它到内部缓存、系统内存和其他处理器 缓存到数据在总线上保持一致）
  synchronized 介绍 synchronized用到锁是存储在对象头里面的，对象头由 MarkWord、类型指针、数组长度（对象为数组时）。
markword（表格中空白格子为向左合并）
   锁状态 25bit 4bit 1bit 2bit     无锁 对象hashCode 对象分代年龄 0 01   轻量级锁 指向栈中指针   00   重量级锁 指向互斥量（重量级锁）指针   10   GC标记 空   11   偏向锁 线程ID(23bit) Epoch(2bit) 对象分代年龄 1 01    Monitor类型对象，重量级锁状态下，MarkWork里指针指向的对象。</description>
    </item>
    
  </channel>
</rss>