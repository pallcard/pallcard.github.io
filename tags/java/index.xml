<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Java on 刘科个人博客</title>
    <link>https://pallcard.github.io/tags/java/</link>
    <description>Recent content in Java on 刘科个人博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <copyright>All rights reserved - 2019</copyright>
    <lastBuildDate>Fri, 06 Mar 2020 19:15:26 +0800</lastBuildDate>
    
	<atom:link href="https://pallcard.github.io/tags/java/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>ReentrantLock</title>
      <link>https://pallcard.github.io/2020/reentrantlock/</link>
      <pubDate>Fri, 06 Mar 2020 19:15:26 +0800</pubDate>
      
      <guid>https://pallcard.github.io/2020/reentrantlock/</guid>
      <description>ReentrantLock ReentrantLock流程 测试代码 main方法中通过new ReentrantLock();创建了一个可重入锁，然后通过线程池创建了5个线程，在各个线程中通过rlock.lock();进行加锁，然后执行逻辑，最后通过rlock.unlock();进行解锁。代码如下：
import java.util.concurrent.ExecutorService; import java.util.concurrent.Executors; import java.util.concurrent.locks.ReentrantLock; public class ReentrantLockTest { public static volatile int count = 0; public static void main(String[] args) throws InterruptedException { // ReentrantLock rlock = new ReentrantLock(true); ReentrantLock rlock = new ReentrantLock(); ExecutorService executorService = Executors.newFixedThreadPool(5); for (int i = 0; i &amp;lt; 5; i++) { executorService.execute(()-&amp;gt;{ rlock.lock(); System.out.println(Thread.currentThread().getName()+ &amp;quot; start&amp;quot;); for (int j = 0; j &amp;lt; 10; j++) { System.</description>
    </item>
    
    <item>
      <title>AQS</title>
      <link>https://pallcard.github.io/2020/aqs/</link>
      <pubDate>Wed, 04 Mar 2020 19:14:41 +0800</pubDate>
      
      <guid>https://pallcard.github.io/2020/aqs/</guid>
      <description>AQS AbstractQueuedSynchronizer（AQS）是同步器实现框架，它是构建锁或者其他同步组件的基础框架（如ReentrantLock、ReentrantReadWriteLock、Semaphore等），JUC并发包的作者（Doug Lea）期望它能够成为实现大部分同步需求的基础。
AQS的主要使用方式是继承，子类通过继承同步器并实现它的抽象方法来管理同步状态。
源码 定义 public abstract class AbstractQueuedSynchronizer extends AbstractOwnableSynchronizer implements java.io.Serializable { private transient volatile Node head; // 头结点 private transient volatile Node tail; // 尾结点 private volatile int state; //state 字段为同步状态，其中 state &amp;gt; 0 为有锁状态，每次加锁就在原有 state 基础上加 1，即代表当前持有锁的线程加了 state 次锁，反之解锁时每次减一，当 statte = 0 为无锁状态； }  Node  static final class Node { // 共享模式，表示线程要获取的是共享锁，即一个锁可以被不同的线程拥有 static final Node SHARED = new Node(); // 独占模式，表示线程要获取的独占锁，即一个锁只能被一个线程拥有 static final Node EXCLUSIVE = null; //表示当前节点的线程因为超时或中断被取消了 static final int CANCELLED = 1; // 表示当前节点的后续节点中的线程通过 park 被阻塞了，需要通过unpark解除它的阻塞 static final int SIGNAL = -1; // 表示当前节点在 condition 队列中 static final int CONDITION = -2; // 共享模式的头结点可能处于此状态，表示无条件往下传播,引入此状态是为了优化锁竞争，使队列中线程有序地一个一个唤醒 static final int PROPAGATE = -3; volatile int waitStatus; volatile Node prev; volatile Node next; volatile Thread thread; Node nextWaiter; }  重要方法 acquire  public final void acquire(int arg) { //去尝试获取锁，获取成功则设置锁状态并返回true，否则返回false。 if (!</description>
    </item>
    
    <item>
      <title>查看Jdk源码方式</title>
      <link>https://pallcard.github.io/2020/%E6%9F%A5%E7%9C%8Bjdk%E6%BA%90%E7%A0%81%E6%96%B9%E5%BC%8F/</link>
      <pubDate>Sun, 01 Mar 2020 20:05:45 +0800</pubDate>
      
      <guid>https://pallcard.github.io/2020/%E6%9F%A5%E7%9C%8Bjdk%E6%BA%90%E7%A0%81%E6%96%B9%E5%BC%8F/</guid>
      <description> 查看JDK源码方法  到jdk的目录下找到src.zip进行解压  在项目中新建一个文件夹，如下我在resources目录下新建了一个jdk文件夹，然后将第二步解压的文件复制到这里。  到project struct中，在sdks下，修改sourcepath指向直接添加到项目中的jdk目录。  去掉下图中的对勾  完成以上步骤就可以编写test类，进行单步调试代码了。  </description>
    </item>
    
    <item>
      <title>Java并发工具包</title>
      <link>https://pallcard.github.io/2019/java%E5%B9%B6%E5%8F%91%E5%B7%A5%E5%85%B7%E5%8C%85/</link>
      <pubDate>Wed, 07 Aug 2019 23:22:27 +0800</pubDate>
      
      <guid>https://pallcard.github.io/2019/java%E5%B9%B6%E5%8F%91%E5%B7%A5%E5%85%B7%E5%8C%85/</guid>
      <description>引言 JDK并发包中提供了CountDownLatch、CyclicBarrier、Semaphore工具类来实现并发流程的控制。 Exchanger提供了线程间交换数据的方法。
join()方法 需求：实现主程序要等待其他线程完成后，在继续执行。很容易想到使用join()方法来实现。
public class JoinCountDownLatchTest { public static void main(String[] args) throws InterruptedException { Thread thread1 = new Thread(() -&amp;gt; { System.out.println(&amp;quot;执行1&amp;quot;); }); Thread thread2 = new Thread(() -&amp;gt; { System.out.println(&amp;quot;执行2&amp;quot;); }); thread1.start(); thread2.start(); thread1.join(); thread2.join(); System.out.println(&amp;quot;主线程&amp;quot;); } } /* 输出结果： 执行1 执行2 主线程 */  join()原理是不停的检查join线程是否存活，直到join线程都中止，线程才会this.notifyAll()。
CountDownLatch类 public class CountDownLatchTest { public static void main(String[] args) throws InterruptedException { CountDownLatch countDownLatch = new CountDownLatch(2); Thread thread1 = new Thread(() -&amp;gt; { System.</description>
    </item>
    
    <item>
      <title>Volatile和synchronized</title>
      <link>https://pallcard.github.io/2019/volatile%E5%92%8Csynchronized/</link>
      <pubDate>Wed, 07 Aug 2019 21:20:13 +0800</pubDate>
      
      <guid>https://pallcard.github.io/2019/volatile%E5%92%8Csynchronized/</guid>
      <description>volatile volatile是轻量级的synchronized，它可以在并发中保证共享变量的可见性
原理 volatile变量进行写操作时，JVM会向处理器发送一条Lock前缀的指令，将这个变量所在的缓存行写回到系统内存中。 为了保证缓存一致性，每个处理器会通过嗅探在总线上传播的数据来检查自己缓存的值是不是过期了，当处理器发现自己 缓存行对应的内存地址被修改了，就会将当前处理器的缓存行失效，当处理器要对这个数据进行操作时，就会重新从系统内存 中把数据读取到缓存中。
 Lock前缀指令会引起处理器缓存回写到内存。
 一个处理器到缓存回写到内存回导致其他处理器缓存失效。（处理器使用嗅探技术保证它到内部缓存、系统内存和其他处理器 缓存到数据在总线上保持一致）
  synchronized 介绍 synchronized用到锁是存储在对象头里面的，对象头由 MarkWord、类型指针、数组长度（对象为数组时）。
markword（表格中空白格子为向左合并）
   锁状态 25bit 4bit 1bit 2bit     无锁 对象hashCode 对象分代年龄 0 01   轻量级锁 指向栈中指针   00   重量级锁 指向互斥量（重量级锁）指针   10   GC标记 空   11   偏向锁 线程ID(23bit) Epoch(2bit) 对象分代年龄 1 01    Monitor类型对象，重量级锁状态下，MarkWork里指针指向的对象。</description>
    </item>
    
    <item>
      <title>装饰者模式</title>
      <link>https://pallcard.github.io/2019/%E8%A3%85%E9%A5%B0%E8%80%85%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Tue, 06 Aug 2019 22:10:05 +0800</pubDate>
      
      <guid>https://pallcard.github.io/2019/%E8%A3%85%E9%A5%B0%E8%80%85%E6%A8%A1%E5%BC%8F/</guid>
      <description>装饰者模式 在不改变原类文件以及不使用继承的情况下，动态地将责任附加到对象上，从而实现动态拓展一个对象的功能。它是通过创建一个包装对象，也就是装饰来包裹真实的对象。
举例说明 包含四个部分
 抽象组件 &amp;mdash;-&amp;gt; IDrink
 具体组件 &amp;mdash;-&amp;gt; Coffee
 抽象装饰 &amp;mdash;-&amp;gt; DrinkDecorator
 具体装饰 &amp;mdash;-&amp;gt; Milk, Ice
  抽象主键 IDrink public interface IDrink { double cost(); String describe(); }  具体组件 Coffee public class Coffee implements IDrink{ @Override public double cost() { return 10; } @Override public String describe() { return &amp;quot;coffer&amp;quot;; } }  抽象装饰 DrinkDecorator public abstract class DrinkDecorator implements IDrink { protected IDrink drink; }  抽象装饰 Milk public class Milk extends DrinkDecorator{ public Milk(IDrink drink) { this.</description>
    </item>
    
    <item>
      <title>反射</title>
      <link>https://pallcard.github.io/2019/%E5%8F%8D%E5%B0%84/</link>
      <pubDate>Sat, 06 Jul 2019 23:15:44 +0800</pubDate>
      
      <guid>https://pallcard.github.io/2019/%E5%8F%8D%E5%B0%84/</guid>
      <description>一、定义 反射（reflection）是java的特征之一，它允许允许中的Java程序获取自身的信息，并且可以操作累或对象的内部属性。
二、基本运用 反射可以用于判断任意对象所属的类，获得 Class 对象，构造任意一个对象以及调用一个对象。反射相关的类一般都在 java.lang.relfect 包里。
1. 获取Class对象 public class Demo01 { public static void main(String[] args) throws Exception{ String str = new String(); // 1.通过对象的getClass方法获得 Class strClass = str.getClass(); System.out.println(strClass.getName()); // 2.通过class属性获得 // 任何数据类型（包括基本数据类型）都有一个“静态”的class属性 Class strClass2 = String.class; System.out.println(strClass2.getName()); System.out.println(strClass2 == strClass); // 3.使用Class类的forName静态方法 // 注意此字符串必须是真实路径，就是带包名的类路径，包名.类名 try{ Class strClass3 = Class.forName(&amp;quot;java.lang.String&amp;quot;); System.out.println(strClass3 == strClass2); } catch (Exception e) { e.printStackTrace(); } System.out.println(strClass.isInstance(&amp;quot;test&amp;quot;)); System.out.println(strClass instanceof Object); } } // 结果： java.</description>
    </item>
    
    <item>
      <title>算法016</title>
      <link>https://pallcard.github.io/2019/algorithm016/</link>
      <pubDate>Sat, 06 Jul 2019 17:35:19 +0800</pubDate>
      
      <guid>https://pallcard.github.io/2019/algorithm016/</guid>
      <description>描述 正则表达式匹配问题
请实现一个函数用来匹配包括 &amp;lsquo;.&amp;rsquo; 和 &amp;lsquo;*&amp;rsquo; 的正则表达式。模式中的字符 &amp;lsquo;.&amp;rsquo; 表示任意一个字符，而 &amp;lsquo;*&amp;rsquo; 表示它前面的字符可以出现任意次（包含 0 次）。
. 一个任意字符
* 表示*前字符出现（0-？）字符
例子 aaa 以下两模式串均可匹配 ab*ac*a a.a  思路 采用两个下标，分别记录目标串与模式串。 循环模式串，若为.，则下标加1； 若为模式串与目标串字符相同，则下标加1，否则看模式串下一个字符算法为*；
代码 public class Demo016 { public static void main(String[] args) { String string = &amp;quot;aaa&amp;quot;; String pattern = &amp;quot;ab*a&amp;quot;; int index = 0; int i = 0; boolean result = true; for (i = 0; i &amp;lt; pattern.length(); i++) { if (index &amp;gt;= string.</description>
    </item>
    
    <item>
      <title>算法015</title>
      <link>https://pallcard.github.io/2019/algorithm015/</link>
      <pubDate>Sat, 06 Jul 2019 17:32:45 +0800</pubDate>
      
      <guid>https://pallcard.github.io/2019/algorithm015/</guid>
      <description> 描述 二进制中1的个数
输入一个整数，输出该数二进制表示中1的个数
例子 Input: Output:  思路 n&amp;amp;(n-1)会去除掉n的位级表示中的最低的一位
代码 public class Demo015 { public static int numberOf1(int n) { int count = 0; if (n == 0) { return 0; } while (n != 0) { count++; n &amp;amp;= (n-1); } return count; } public static void main(String[] args) { System.out.println(numberOf1(10)); System.out.println(Integer.bitCount(10)); } }  </description>
    </item>
    
    <item>
      <title>算法014</title>
      <link>https://pallcard.github.io/2019/algorithm014/</link>
      <pubDate>Sat, 06 Jul 2019 17:24:14 +0800</pubDate>
      
      <guid>https://pallcard.github.io/2019/algorithm014/</guid>
      <description>描述 剪绳子
把一根绳子剪成多段（&amp;gt;1），并使得所得到每段绳子的长度之积最大。
例子 Input: n(绳长) Output:  思路 方法一： 贪婪算法
使得所得到的绳子中3的数量最多，1的数量最少（没有）
方法二： 动态规划
定义 f(n) : 最大乘积，f(n) = max{f(i)*f(n-i)}
代码 public class Demo014 { // 贪婪算法 public static int maxLength(int n) { if (n &amp;lt; 2) { return 0; } else if (n == 2) { return 1; } else if (n == 3) { return 2; } else { if (n%3==1){ return (int) Math.pow(3, n/3-1)*4; } else if(n%3==0) { return (int) Math.</description>
    </item>
    
    <item>
      <title>正则表达式</title>
      <link>https://pallcard.github.io/2019/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</link>
      <pubDate>Sat, 06 Jul 2019 09:10:02 +0800</pubDate>
      
      <guid>https://pallcard.github.io/2019/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</guid>
      <description>一、简介 正则表达式用于文本内容的查找和替换。在线工具https://regexr.com/
   元字符 说明     \b 回退   \f 换页符   \n 换行符   \r 回车符   \t 制表符   \v 垂直制表符   \d 数字字符，等价于 [0-9]   \w 大小写字母，下划线和数字，等价于 [a-zA-Z0-9_]   \s 任何一个空白字符，等价于 [\f\n\r\t\v]   \l 把下个字符转换为小写   \u 把下个字符转换为大写   \L 把\L 和\E 之间的字符全部转换为小写   \U 把\U 和\E 之间的字符全部转换为大写   \E 结束\L 或者\U    说明: \D,\W,\S是对上述3个的取非；</description>
    </item>
    
    <item>
      <title>算法013</title>
      <link>https://pallcard.github.io/2019/algorithm013/</link>
      <pubDate>Fri, 05 Jul 2019 08:22:30 +0800</pubDate>
      
      <guid>https://pallcard.github.io/2019/algorithm013/</guid>
      <description>描述 机器人的运动范围
地上有一个 m 行和 n 列的方格。一个机器人从坐标 (0, 0) 的格子开始移动，每一次只能向左右上下四个方向移动一格，但是不能进入行坐标和列坐标的数位之和大于 k 的格子。
例如，当 k 为 18 时，机器人能够进入方格 (35,37)，因为 3+5+3+7=18。但是，它不能进入方格 (35,38)，因为 3+5+3+8=19。请问该机器人能够达到多少个格子？
例子 Input: m(行数) n(列数) k(阀值) Output:  思路 先将数组中的值计算按位出来存入数组，使用深度优先遍历，将经过的格子中的值置k+1，使用count记录所有走过的格子。
代码 public class Demo013 { // 左 上 右 下 public static int [][] direct = new int [][] {{0,-1},{-1,0},{0,1},{1,0}}; public static int count = 0; public static int m = 11; public static int n = 11; public static int k = 10; public static void main(String[] args) { int [][] array = new int[m][n]; for (int i = 0; i &amp;lt; m; i++) { for (int j = 0; j &amp;lt; n; j++) { int i_temp = i; int j_temp = j; // 处理数位 int i_sum = i_temp%10; int j_sum = j_temp%10; i_temp /= 10; j_temp /= 10; while (i_temp &amp;gt; 0){ i_sum += i_temp%10; i_temp /= 10; } while (j_temp &amp;gt; 0) { j_sum += j_temp%10; j_temp /= 10; } array[i][j] = i_sum+j_sum; } } count++; array[0][0] = k + 1; DPsearch(array,0,0); System.</description>
    </item>
    
    <item>
      <title>算法012</title>
      <link>https://pallcard.github.io/2019/algorithm012/</link>
      <pubDate>Thu, 04 Jul 2019 22:28:14 +0800</pubDate>
      
      <guid>https://pallcard.github.io/2019/algorithm012/</guid>
      <description>描述 矩阵中的路径 判断在一个矩阵中是否存在一条包含某字符串所有字符的路径。路径可以从矩阵中的任意一个格子开始，每一步可以在矩阵中向上下左右移动一个格子。如果一条路径经过了矩阵中的某一个格子，则该路径不能再进入该格子。
例子 Input: Output:  思路 先将所给一维数组转化为二维数组，找到目标字符串首个字符所在位置。然后进行深度递归匹配目标字符串。
代码 public class Demo012 { public static void main(String[] args) { char[] matrix = new char[]{&#39;b&#39;, &#39;b&#39;, &#39;c&#39;, &#39;e&#39;, &#39;s&#39;, &#39;f&#39;, &#39;c&#39;, &#39;s&#39;, &#39;a&#39;, &#39;d&#39;, &#39;e&#39;, &#39;e&#39;}; int rows = 3; int cols = 4; char [] target = new char[]{&#39;b&#39;,&#39;f&#39;,&#39;c&#39;,&#39;e&#39;}; char[][] array = new char[3][4]; int index = 0; int x = 0, y = 0; for (int i = 0; i &amp;lt; rows; i++) { for (int j = 0; j &amp;lt; cols; j++) { array[i][j] = matrix[index++]; } } boolean result = false; for (int i = 0; i &amp;lt; rows; i++) { for (int j = 0; j &amp;lt; cols; j++) { if (array[i][j] == target[0]) { result = search(array,i,j,target,1); if (result) { System.</description>
    </item>
    
    <item>
      <title>算法011</title>
      <link>https://pallcard.github.io/2019/algorithm011/</link>
      <pubDate>Thu, 04 Jul 2019 21:12:50 +0800</pubDate>
      
      <guid>https://pallcard.github.io/2019/algorithm011/</guid>
      <description> 描述 旋转数组(非递减)的最小数
把一个数组最开始的若干位搬到数组的末尾，称为旋转数组。
例子 Input: Output:  思路 采用二分的方式来处理，
正常情况
4 5 6 7 1 2，分成两部分4 5 6，7 1 2；可知4 5 6为非递减数列，7 1 2为旋转数组，故结果在循环数组中，可以去掉另外一半数组；
两种特殊情况：
（1）1 1 1 1 0 1，num[left] == num[mid] == num[right],此时无法分区，故只能遍历
（2）4 5 6 1 2 3，分区后两个部分均为非递减数组，则返回num[left]和num[mid+1]中较小的数即可。
代码 public class Demo011 { public static void main(String[] args) { int [] arr = new int[] {1,1,1,0,1}; System.out.println(searchMin(arr,arr.length)); } public static int searchMin(int [] array, int length) { int left = 0, right = length - 1; int mid = (left + right) / 2; while(left &amp;lt; right) { // 分区间后刚好左右都为非递减数组 if(array[left] &amp;lt; array[mid] &amp;amp;&amp;amp; array[mid+1] &amp;lt; array[right]) { if (array[left] &amp;gt; array[mid+1]) { left = mid+1; } break; } // 无法分区间情况 if (array[left] == array[mid] &amp;amp;&amp;amp; array[mid] == array[right]) { int minIndex = left; for (int i = left; i &amp;lt;= right; i++) { if (array[minIndex] &amp;gt; array[i]) { minIndex = i; } } left = minIndex; break; } // 正常分区间 if (array[left] &amp;lt; array[mid]) { // 左侧为非递减数组，右侧为旋转数组==&amp;gt;取右侧 left = mid+1; } else { // 取左侧 right = mid - 1; } } return array[left]; } }  </description>
    </item>
    
    <item>
      <title>算法010</title>
      <link>https://pallcard.github.io/2019/algorithm010/</link>
      <pubDate>Thu, 04 Jul 2019 21:08:56 +0800</pubDate>
      
      <guid>https://pallcard.github.io/2019/algorithm010/</guid>
      <description>描述 变态跳青蛙
青蛙可以跳1，2，3，，，n阶。问跳到n有多少种不同方法。
例子 Input: Output:  思路 f(n) = f(n-1) + f(n-2) + ,,, + f(0) f(n-1) = f(n-2) + f(n-3) + ,,, + f(0) ==&amp;gt; f(n) = 2 * f(n-1)  代码 public class Demo010 { public static void main(String[] args) { System.out.println(jumpFloor(3)); System.out.println(jumpFloor2(3)); } // f(0) = 1 // f(1) = 1 // f(2) = 2 // f(3) = 4 public static int jumpFloor(int target) { int [] dp = new int[target]; Arrays.</description>
    </item>
    
    <item>
      <title>算法009</title>
      <link>https://pallcard.github.io/2019/algorithm009/</link>
      <pubDate>Thu, 04 Jul 2019 21:01:25 +0800</pubDate>
      
      <guid>https://pallcard.github.io/2019/algorithm009/</guid>
      <description> 描述 斐波那契数列， * 应用1：矩形覆盖,n个2*1小矩形覆盖2*n的大矩形，有多少种方法 * 应用2：跳台阶,可以跳1列或者2列，跳n阶有多少种方法
例子 Input: Output:  思路 f(n) = n; n = 0,1 f(n) = f(n-1) + f(n-2); n &amp;gt; 1  方法一：递归实现
方法二：使用一个数组存放所用的数据
方法三：发现第n项只与相邻的前两项有关，故只用存储前两项数据即可。
代码 public class Demo009 { public static void main(String[] args) { System.out.println(fibonacci(10)); System.out.println(fibonacci2(10)); System.out.println(fibonacci3(10)); } public static int fibonacci(int n) { if (n == 0) { return 0; } else if (n == 1) { return 1; } else return fibonacci(n-1) + fibonacci(n-2); } // 0 1 2 3 4 5 6 7 8 9 10 // 0 1 1 2 3 5 8 13 21 34 55 public static int fibonacci2(int n) { if (n &amp;lt;= 1) { return n; } int [] fib = new int[n+1]; fib[0] = 0; fib[1] = 1; for (int i = 2; i &amp;lt;= n; i++) { fib[i] = fib[i-1] + fib[i-2]; } return fib[n]; } public static int fibonacci3(int n) { if (n &amp;lt;= 1) { return n; } int temp1 = 0, temp2 = 1; int result = 0; for (int i = 2; i &amp;lt;= n; i++) { result = temp1 + temp2; temp1 = temp2; temp2 = result; } return result; } }  </description>
    </item>
    
    <item>
      <title>JMM例子</title>
      <link>https://pallcard.github.io/2019/jmm%E4%BE%8B%E5%AD%90/</link>
      <pubDate>Mon, 01 Jul 2019 22:26:19 +0800</pubDate>
      
      <guid>https://pallcard.github.io/2019/jmm%E4%BE%8B%E5%AD%90/</guid>
      <description>例子1，代码如下：
public class demo001 { private static boolean initFlag = false; // private static volatile boolean initFlag = false; public static void main(String[] args) throws InterruptedException { // 线程1 new Thread(new Runnable() { @Override public void run() { System.out.println(&amp;quot;等待数据准备&amp;quot;); while (!initFlag) {} System.out.println(&amp;quot;数据准备完毕，执行程序逻辑&amp;quot;); } }).start(); Thread.sleep(2000); // 线程2 new Thread(new Runnable() { @Override public void run() { System.out.println(&amp;quot;数据准备中。。。&amp;quot;); initFlag = true; System.out.println(&amp;quot;数据准备完成&amp;quot;); } }).start(); } }  说明
initFlag无volatile关键字修饰时，线程1将initFlag从主内存读入到工作内存，线程1一直循环，线程2将initFlag从主内存读入到工作内存，并通过线程执行引擎对initFlag进行修改，然后写回到主内存中，但是线程1中的initFlag仍然是工作内存中的值，线程1无法感知到其他内存对该共享变量的修改，故会一直循环下去。缓存一致性问题
缓存一致性问题</description>
    </item>
    
    <item>
      <title>Mybaits</title>
      <link>https://pallcard.github.io/2019/mybaits/</link>
      <pubDate>Thu, 20 Jun 2019 19:00:36 +0800</pubDate>
      
      <guid>https://pallcard.github.io/2019/mybaits/</guid>
      <description>前言 整个实验使用Maven 来管理项目，编译器IDEA，github仓库 https://github.com/pallcard/mybatis
JDBC连接数据库 1.引入依赖（pom.xml）
&amp;lt;dependencies&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;mysql&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;mysql-connector-java&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;5.1.32&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;/dependencies&amp;gt;	 说明：（pom.xml） Maven 项目默认编译项目为JDK 1.5，通过引入以下依赖来指定Maven 编译版本
&amp;lt;build&amp;gt; &amp;lt;plugins&amp;gt; &amp;lt;plugin&amp;gt; &amp;lt;groupId&amp;gt;org.apache.maven.plugins&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;maven-compiler-plugin&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;3.1&amp;lt;/version&amp;gt; &amp;lt;configuration&amp;gt; &amp;lt;source&amp;gt;1.8&amp;lt;/source&amp;gt; &amp;lt;target&amp;gt;1.8&amp;lt;/target&amp;gt; &amp;lt;/configuration&amp;gt; &amp;lt;/plugin&amp;gt; &amp;lt;/plugins&amp;gt; &amp;lt;/build&amp;gt;  2.JDBC测试类JDBCTest.java
public class JDBCTest { public static void main(String[] args) throws Exception { Connection connection = null; PreparedStatement prepareStatement = null; ResultSet rs = null; try { // 加载驱动(每次加载驱动，驱动名硬编码) Class.forName(&amp;quot;com.mysql.jdbc.Driver&amp;quot;); // 获取连接(每次获取连接，连接信息硬编码) String url = &amp;quot;jdbc:mysql://127.0.0.1:3306/mybatis_demo&amp;quot;; String user = &amp;quot;root&amp;quot;; String password = &amp;quot;&amp;quot;; connection = DriverManager.</description>
    </item>
    
    <item>
      <title>算法008</title>
      <link>https://pallcard.github.io/2019/algorithm008/</link>
      <pubDate>Wed, 05 Jun 2019 20:40:17 +0800</pubDate>
      
      <guid>https://pallcard.github.io/2019/algorithm008/</guid>
      <description>描述 回旋数组
例子 Input: 3 3 Output: 1 2 3 8 9 4 7 6 5  思路 用count来计数， x,y当前坐标（行，列） last_t上次所走方向，右1 下2 左3 上4
代码 public class Question008 { public static void main(String[] args) { Scanner sc = new Scanner(System.in); int m = sc.nextInt(); int n = sc.nextInt(); int [][] array = new int [m][n]; for (int i = 0; i &amp;lt; m; i++) { for (int j = 0; j &amp;lt; n; j++) { array[i][j] = -1; } } int x = 0, y = 0; int count = 1; // 右1 下2 左3 上4 int last_t = 1; while (count &amp;lt;= m*n) { array[x][y] = count++; if(last_t == 1) { if (y+1&amp;lt;n &amp;amp;&amp;amp; array[x][y+1] &amp;lt; 0){ y++; } else { last_t = 2; if (x+1 &amp;lt; m &amp;amp;&amp;amp; array[x+1][y] &amp;lt; 0) { x++; }else { break; } } //下 } else if (last_t == 2) { if(x+1 &amp;lt; m &amp;amp;&amp;amp; array[x+1][y] &amp;lt; 0) { x++; } else { last_t = 3; if (y-1 &amp;gt;= 0 &amp;amp;&amp;amp; array[x][y-1] &amp;lt; 0) { y--; } else { break; } } //左 } else if (last_t == 3) { if(y-1 &amp;gt;= 0 &amp;amp;&amp;amp; array[x][y-1] &amp;lt; 0) { y--; } else { last_t = 4; if (x-1 &amp;gt;= 0 &amp;amp;&amp;amp; array[x-1][y] &amp;lt; 0) { x--; } else { break; } } } //上 else { if(x-1 &amp;gt;= 0 &amp;amp;&amp;amp; array[x-1][y] &amp;lt; 0) { x--; } else { last_t = 1; if (y+1 &amp;lt; n &amp;amp;&amp;amp; array[x][y+1] &amp;lt; 0) { y++; } else { break; } } } } for (int i = 0; i &amp;lt; m; i++) { for (int j = 0; j &amp;lt; n; j++) { System.</description>
    </item>
    
    <item>
      <title>算法007</title>
      <link>https://pallcard.github.io/2019/algorithm007/</link>
      <pubDate>Wed, 05 Jun 2019 15:40:44 +0800</pubDate>
      
      <guid>https://pallcard.github.io/2019/algorithm007/</guid>
      <description> 描述 用两个栈来实现一个队列，完成队列的 Push 和 Pop 操作。
例子 Input: Output:  思路 一个栈负责入队，另一个栈负责出队。 * 队列push操作，直接进第一个栈 * 队列pop操作，判断第二个栈是否为空，若空将第一个栈所有元素进栈到第二个栈中，若不为空，则第二个栈直接出栈
代码 public class Question007 { private static Stack&amp;lt;Integer&amp;gt; stack1 = new Stack&amp;lt;&amp;gt;(); private static Stack&amp;lt;Integer&amp;gt; stack2 = new Stack&amp;lt;&amp;gt;(); public void push(Integer item){ stack1.push(item); } public Integer pop() throws Exception { if(stack2.isEmpty()) { while (!stack1.isEmpty()){ stack2.push(stack1.peek()); } } if(stack2.isEmpty()) { throw new Exception(&amp;quot;队列为空&amp;quot;); } return stack2.peek(); } }  </description>
    </item>
    
    <item>
      <title>算法006</title>
      <link>https://pallcard.github.io/2019/algorithm006/</link>
      <pubDate>Wed, 05 Jun 2019 14:50:36 +0800</pubDate>
      
      <guid>https://pallcard.github.io/2019/algorithm006/</guid>
      <description>描述 给定一个二叉树和其中的一个结点，请找出中序遍历顺序的下一个结点并且返回。 注意，树中的结点不仅包含左右子结点，同时包含指向父结点的指针。
例子 Input: 二叉树 Output: 中序遍历顺序的下一个结点  思路 中序遍历顺序的下一个结点，中序遍历是左根右， 判断该结点是否有右孩子，
 若有，则下一个结点的最左子结点 若无，则下一个结点为第一个左链指向该结点的祖先结点的结点  代码 public class Question006 { class TreeLinkNode { int val; TreeLinkNode left = null; TreeLinkNode right = null; TreeLinkNode next = null; TreeLinkNode(int val) { this.val = val; } } public TreeLinkNode GetNext(TreeLinkNode pNode) { TreeLinkNode resultNode = null; if(null != pNode.right) { resultNode = pNode.right; while (null != resultNode.left) { resultNode = resultNode.</description>
    </item>
    
    <item>
      <title>算法005</title>
      <link>https://pallcard.github.io/2019/algorithm005/</link>
      <pubDate>Wed, 05 Jun 2019 10:22:59 +0800</pubDate>
      
      <guid>https://pallcard.github.io/2019/algorithm005/</guid>
      <description>描述 根据二叉树的前序遍历和中序遍历的结果，重建出该二叉树。假设输入的前序遍历和中序遍历的结果中都不含重复的数字。
例子 Input: preorder：{3,9,20,15,7} inorder：{9,3,15,20,7} Output: 该二叉树  思路 根据先序遍历确定根，再通过中序遍历将数组划分为两部分，分别是左子树、右子树。 故可以通过一个HashMap存储中序遍历的数组值与下标，key为值，value为下标。
代码 class TreeNode { private TreeNode leftChild; private TreeNode rightChild; private int value; public TreeNode(int value) { this.value = value; } public TreeNode getLeftChild() { return leftChild; } public void setLeftChild(TreeNode leftChild) { this.leftChild = leftChild; } public TreeNode getRightChild() { return rightChild; } public void setRightChild(TreeNode rightChild) { this.rightChild = rightChild; } public int getValue() { return value; } public void setValue(int value) { this.</description>
    </item>
    
    <item>
      <title>算法004</title>
      <link>https://pallcard.github.io/2019/algorithm004/</link>
      <pubDate>Tue, 04 Jun 2019 19:45:58 +0800</pubDate>
      
      <guid>https://pallcard.github.io/2019/algorithm004/</guid>
      <description>描述 从尾到头反过来打印出每个结点的值。
例子 Input: 1 -&amp;gt; 2 -&amp;gt; 3 Output: 3 2 1  思路 方法一：递归调用 方法二：使用栈
代码 class Node { private Node next; private int val; public Node(Node next, int val) { this.next = next; this.val = val; } public Node getNext() { return next; } public void setNext(Node next) { this.next = next; } public int getVal() { return val; } public void setVal(int val) { this.val = val; } } public class Question004 { public static void main(String[] args) { Node node3 = new Node(null, 3); Node node2 = new Node(node3, 2); Node node1 = new Node(node2, 1); Node node = node1; //使用栈 Stack&amp;lt;Integer&amp;gt; stack = new Stack&amp;lt;&amp;gt;(); while (node !</description>
    </item>
    
    <item>
      <title>算法003</title>
      <link>https://pallcard.github.io/2019/algorithm003/</link>
      <pubDate>Tue, 04 Jun 2019 19:24:08 +0800</pubDate>
      
      <guid>https://pallcard.github.io/2019/algorithm003/</guid>
      <description>描述 将一个字符串中的空格替换成 &amp;ldquo;%20&amp;rdquo;。
例子 Input: &amp;quot;A B&amp;quot; Output: &amp;quot;A%20B&amp;quot;  思路 由于要将字符串中所用空格替换为%20，故若字符串含有一个空格，则字符串的总长度会增长2，故可以先遍历一遍字符串，若将字符串的总长度变为相应的长度，需要两个指针，分别指向原字符串长度的最后一个票p1，和新字符串的最后一个p2，若原字符串为字符，则直接赋值给p2；若原字符串为空格，则赋值%20。
代码 public class Question003 { public static void main(String[] args) { StringBuilder sb = new StringBuilder(&amp;quot;A B&amp;quot;); int p1 = sb.length()-1;//指向原字符串最后一个 for (int i = 0; i &amp;lt;= p1; i++) { if(sb.charAt(i) == &#39; &#39;) { sb.append(&amp;quot; &amp;quot;); } } int p2 = sb.length()-1;//指向新字符串最后一个 while (p1 &amp;gt;= 0 &amp;amp;&amp;amp; p1 &amp;lt; p2) { if(sb.charAt(p1) != &#39; &#39;) { sb.</description>
    </item>
    
    <item>
      <title>算法002</title>
      <link>https://pallcard.github.io/2019/algorithm002/</link>
      <pubDate>Tue, 04 Jun 2019 16:55:28 +0800</pubDate>
      
      <guid>https://pallcard.github.io/2019/algorithm002/</guid>
      <description>描述 给定一个二维数组，其每一行从左到右递增排序，从上到下也是递增排序。 给定一个数，判断这个数是否在该二维数组中。
例子 Input: 数组： { {1, 4, 7, 11, 15}, {2, 5, 8, 12, 19}, {3, 6, 9, 16, 22}, {10, 13, 14, 17, 24}, {18, 21, 23, 26, 30}, }; 目标值：24 Output: 2  思路 由于每一行从左到右递增排序，从上到下也是递增排序，故可以从右上角开始遍历，若大于目标值，列减1；若小于目标值，行加1；若等于则成功找到。
代码 public class Question002 { public static void main(String[] args) { int target = 24; int [][] array = new int [][]{ {1, 4, 7, 11, 15}, {2, 5, 8, 12, 19}, {3, 6, 9, 16, 22}, {10, 13, 14, 17, 24}, {18, 21, 23, 26, 30}, }; int row = 0, col = array.</description>
    </item>
    
    <item>
      <title>算法001</title>
      <link>https://pallcard.github.io/2019/algorithm001/</link>
      <pubDate>Tue, 04 Jun 2019 16:37:28 +0800</pubDate>
      
      <guid>https://pallcard.github.io/2019/algorithm001/</guid>
      <description> 描述 在一个长度为 n 的数组里的所有数字都在 0 到 n-1 的范围内。数组中某些数字是重复的，但不知道有几个数字是重复的，也不知道每个数字重复几次。请找出数组中任意一个重复的数字。
例子 Input: {2, 3, 1, 0, 2, 5} Output: 2  思路 由于数组中的值大小 为0 到 n-1，可以通过交换就数组中的元素放到与其下标对应的位置，若有两个数要出现在同一个位置，则找到了这个数。
代码 public class Question001 { public static void main(String[] args) { int[] array = new int[] {2,3,1,0,2,5}; for (int i = 0; i &amp;lt; array.length; i++) { while(i != array[i]) { if(array[i] == array[array[i]]) { System.out.println(array[i]); return; } else { swap(array,i,array[i]); } } } } public static void swap(int[] array, int left, int right) { int temp = array[left]; array[left] = array[right]; array[right] = temp; } }  </description>
    </item>
    
    <item>
      <title>JMM</title>
      <link>https://pallcard.github.io/2019/jmm/</link>
      <pubDate>Sun, 02 Jun 2019 10:28:33 +0800</pubDate>
      
      <guid>https://pallcard.github.io/2019/jmm/</guid>
      <description>JMM &amp;nbsp; &amp;nbsp; &amp;nbsp;Java虚拟机规范中定义了Java内存模型（Java Memory Model，JMM），用于屏蔽掉各种硬件和操作系统的内存访问差异，以实现让Java程序在各种平台下都能达到一致的并发效果，JMM规范了Java虚拟机与计算机内存是如何协同工作的。
JMM模型下的线程间通信 线程和主内存之间的抽象关系图：
线程间通信必须要经过主内存。
如下，如果线程A与线程B之间要通信的话，必须要经历下面2个步骤：
1）线程A把本地内存A中更新过的共享变量刷新到主内存中去。
2）线程B到主内存中去读取线程A之前已更新过的共享变量。
注： 当线程操作某个对象时，执行顺序如下： (1) 从主存复制变量到当前工作内存 (read and load) (2) 执行代码，改变共享变量值 (use and assign) (3) 用工作内存数据刷新主存相关内容 (store and write)
说明： 关于主内存与工作内存之间的具体交互协议，即一个变量如何从主内存拷贝到工作内存、如何从工作内存同步到主内存之间的实现细节，Java内存模型定义了以下八种操作来完成：
 read（读取）：作用于主内存变量，把一个变量值从主内存传输到线程的工作内存中，以便随后的load动作使用 load（载入）：作用于工作内存的变量，它把read操作从主内存中得到的变量值放入工作内存的变量副本中。 use（使用）：作用于工作内存的变量，把工作内存中的一个变量值传递给执行引擎，每当虚拟机遇到一个需要使用变量的值的字节码指令时将会执行这个操作。 assign（赋值）：作用于工作内存的变量，它把一个从执行引擎接收到的值赋值给工作内存的变量，每当虚拟机遇到一个给变量赋值的字节码指令时执行这个操作。 store（存储）：作用于工作内存的变量，把工作内存中的一个变量的值传送到主内存中，以便随后的write的操作。 write（写入）：作用于主内存的变量，它把store操作从工作内存中一个变量的值传送到主内存的变量中。 lock（锁定）：作用于主内存的变量，把一个变量标识为一条线程独占状态。 unlock（解锁）：作用于主内存变量，把一个处于锁定状态的变量释放出来，释放后的变量才可以被其他线程锁定。  JMM解决的问题 &amp;nbsp; &amp;nbsp; &amp;nbsp;Java内存模型是围绕着并发编程中原子性、可见性、有序性这三个特征来建立的，那我们依次看一下这三个特征：
原子性 ：一个操作不能被打断，要么全部执行完毕，要么不执行。 基本类型数据的访问大都是原子操作，long 和double类型的变量是64位，但是在32位JVM中，32位的JVM会将64位数据的读写操作分为2次32位的读写操作来进行，这就导致了long、double类型的变量在32位虚拟机中是非原子操作，数据有可能会被破坏，也就意味着多个线程在并发访问的时候是线程非安全的。
可见性 ：一个线程对共享变量做了修改之后，其他的线程立即能够看到（感知到）该变量这种修改（变化）。
&amp;nbsp; &amp;nbsp; &amp;nbsp;Java内存模型是通过将在工作内存中的变量修改后的值同步到主内存，在读取变量前从主内存刷新最新值到工作内存中，这种依赖主内存的方式来实现可见性的。
&amp;nbsp; &amp;nbsp; &amp;nbsp;无论是 普通变量 还是 volatile变量 都是如此，区别在于：volatile的特殊规则保证了volatile变量值修改后的新值立刻同步到主内存，每次使用volatile变量前立即从主内存中刷新 ，因此volatile保证了多线程之间的操作变量的可见性，而普通变量则不能保证这一点。 除了volatile关键字能实现可见性之外，还有synchronized,Lock，final也是可以的。
&amp;nbsp; &amp;nbsp; &amp;nbsp;使用 synchronized 关键字，在同步方法/同步块开始时（Monitor Enter）,使用共享变量时会从主内存中刷新变量值到工作内存中（即从主内存中读取最新值到线程私有的工作内存中），在同步方法/同步块结束时(Monitor Exit),会将工作内存中的变量值同步到主内存中去（即将线程私有的工作内存中的值写入到主内存进行同步）。</description>
    </item>
    
    <item>
      <title>单例模式</title>
      <link>https://pallcard.github.io/2019/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Fri, 31 May 2019 17:15:52 +0800</pubDate>
      
      <guid>https://pallcard.github.io/2019/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</guid>
      <description>通过单例模式可以保证系统中，应用该模式的一个类只有一个实例。即一个类只有一个对象实例。
1.懒汉式 public class Singleton1 { private static Singleton1 singleton1 = null; private Singleton1(){} public static Singleton1 newInstance() { if (singleton1 == null){ singleton1 = new Singleton1(); } return singleton1; } }  2.饿汉式 public class Singleton2 { private static Singleton2 singleton2 = new Singleton2(); private Singleton2(){} public static Singleton2 newSingleton(){ return singleton2; } }  3.懒汉式改 //序列化 public class Singleton3 implements Serializable { // volatile保证变量一致性 private volatile static Singleton3 singleton3 = null; private Singleton3(){ //防止反射调用私有方法 if(singleton3 !</description>
    </item>
    
    <item>
      <title>代理模式</title>
      <link>https://pallcard.github.io/2019/java-proxy/</link>
      <pubDate>Wed, 29 May 2019 20:06:16 +0800</pubDate>
      
      <guid>https://pallcard.github.io/2019/java-proxy/</guid>
      <description>代理模式 代理模式是一种设计模式，提供了对目标对象额外的访问方式，即通过代理对象访问目标对象，这样可以在不修改原目标对象的前提下，提供额外的功能操作，扩展目标对象的功能。
简言之，代理模式就是设置一个中间代理来控制访问原目标对象，以达到增强原对象的功能和简化访问方式。 静态代理 静态代理目录结构 主题接口 IUserDao
public interface IUserDao { void saveUser(); }  主题接口实现类（被代理类） UserDao
public class UserDao implements IUserDao{ @Override public void saveUser() { System.out.println(&amp;quot;保存用户数据&amp;quot;); } }  代理类 UserDaoProxy
public class UserDaoProxy implements IUserDao { //目标对象 private IUserDao targer; public UserDaoProxy(IUserDao iUserDao){ this.targer = iUserDao; } @Override public void saveUser() { System.out.println(&amp;quot;开启事务&amp;quot;); targer.saveUser(); System.out.println(&amp;quot;提交事务&amp;quot;); } }  测试类 ProxyTest
public class ProxyTest { @Test void testStaticProxy(){ //目标对象 IUserDao target = new UserDao(); //代理对象 UserDaoProxy proxy = new UserDaoProxy(target); proxy.</description>
    </item>
    
  </channel>
</rss>