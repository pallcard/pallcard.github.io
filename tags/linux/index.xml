<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Linux on 刘科个人博客</title>
    <link>https://pallcard.github.io/tags/linux/</link>
    <description>Recent content in Linux on 刘科个人博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <copyright>All rights reserved - 2019</copyright>
    <lastBuildDate>Sat, 15 Jun 2019 19:43:24 +0800</lastBuildDate>
    
	<atom:link href="https://pallcard.github.io/tags/linux/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>FastDFS</title>
      <link>https://pallcard.github.io/2019/fastdfs/</link>
      <pubDate>Sat, 15 Jun 2019 19:43:24 +0800</pubDate>
      
      <guid>https://pallcard.github.io/2019/fastdfs/</guid>
      <description>1. FastDFS 理论 FastDFS 是一个开源的高性能分布式文件系统（DFS）。 它的主要功能包括：文件存储，文件同步和文件访问，以及高容量和负载平衡。主要解决了海量数据存储问题，特别适合以中小文件（建议范围：4KB &amp;lt; file_size &amp;lt;500MB）为载体的在线服务。 FastDFS 系统有三个角色：跟踪服务器(Tracker Server)、存储服务器(Storage Server)和客户端(Client)。
tracker server 跟踪服务器，主要做调度工作，起负载均衡的作用。负责管理所有的storage server和group，每个storage在启动后会连接tracker，告诉tracker自己所属的group，并保持周期性心跳，tracker根据storage的心跳信息，建立映射表，tracke管理的元数据很少（tracker上的元数据都是由storage汇报产生），并且直接存在内存中，本身不需要持久化任何数据。tracker之间是对等的，因此扩展tracker是很容易的，直接增加tracker服务，同时修改storage的配置，增加新增的tarcker服务的地址和端口，重启即可。所有的tracker都会接受storage的心跳信息，以生成元数据信息。
storage server 存储服务器（又称：存储节点或数据服务器），顾名思义是用来保存文件的和文件属性的。以group为单位，每个group内可以包含多台storage server，数据互为备份，存储容量空间以group中storage server容量最小的为准。以group为单位组织存储能够方便的进行应用隔离、负责均衡和副本数定制；确定是group的容量受单机容量的限制。group内机器故障，需要依赖group内其他机器重新同步数据来恢复数据（更换坏盘，重启fdfs_storaged即可）。storage存储依赖本地文件系统，storage课配置多个数据存储目录，磁盘不做raid，直接分别挂在到多个目录，将这些目录配置为storage的数据目录即可。
storage接收写请求的时候，会根据配置好的规则，选择其中一个存储目录来存储文件；为了避免单个目录下的文件过多，storage第一次启动的时候，会在每个数据存储目录创建2级子目录，每级256，总共65536个目录，新写的文件会以hash的方式路由到其中一个子目录下，然后将文件数据直接作为一个本地文件存储。
client 客户端，作为业务请求的发起方，通过专有接口，使用TCP/IP协议与跟踪器服务器或存储节点进行数据交互。 文件上传 生成file id 选择存储目录之后，storage会生成一个file_id，采用base64编码，包含有：storage server ip，文件创建时间，文件大小，文件CRC32校验码和随机数。每个存储目录下有两个256*256个子目录，storage会按文件file_id进行两次hash，路由到其中一个子目录，然后将文件以file_id为名字存储。 文件路径如下： group0/M00/00/00/rBAAAl0EkICAIiBOAAABowgL3Pk888.png * 组名：group0 * 磁盘： M00 * 目录：00/00 * 文件名：rBAAAl0EkICAIiBOAAABowgL3Pk888.png
文件索引信息包括：组名，虚拟磁盘路径，数据两级目录，文件名。
 组名：文件上传后所在的存储组名称，在文件上传成功后有存储服务器返回，需要客户端自行保存。 虚拟磁盘路径：存储服务器配置的虚拟路径，与磁盘选项store_path*对应。 数据两级目录：存储服务器在每个虚拟磁盘路径下创建的两级目录，用于存储数据文件。 文件名：与文件上传时不同。是由存储服务器根据特定信息生成，文件名包含：源存储服务器IP地址、文件创建时间戳、文件大小、随机数和文件拓展名等信息。  文件下载 2.安装FastDFS环境 下载安装 libfastcommon yum -y install libevent # 下载libfastcommon wget https://github.com/happyfish100/libfastcommon/archive/V1.0.7.tar.gz # 解压 tar -zxvf V1.0.7.tar.gz # 编译、安装 cd libfastcommon-1.</description>
    </item>
    
    <item>
      <title>初试部署项目到腾讯云（环境的安装）</title>
      <link>https://pallcard.github.io/2019/%E5%88%9D%E8%AF%95%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE%E5%88%B0%E8%85%BE%E8%AE%AF%E4%BA%91%E7%8E%AF%E5%A2%83%E7%9A%84%E5%AE%89%E8%A3%85/</link>
      <pubDate>Sat, 15 Jun 2019 19:32:56 +0800</pubDate>
      
      <guid>https://pallcard.github.io/2019/%E5%88%9D%E8%AF%95%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE%E5%88%B0%E8%85%BE%E8%AE%AF%E4%BA%91%E7%8E%AF%E5%A2%83%E7%9A%84%E5%AE%89%E8%A3%85/</guid>
      <description>linux常用命令  ls：查看该目录下文件 pwd：查看文件目录 rm -f 文件名：删除文件 /usr/local/mysql/bin/mysql -u root -p 登录mysql  第一步：jdk的安装 下载jdk后，解压报错（原因是选择接受协议的问题），输入如下命令：
wget --no-check-certificate --no-cookies --header &amp;quot;Cookie: oraclelicense=accept-securebackup-cookie&amp;quot; https://download.oracle.com/otn-pub/java/jdk/8u201-b09/42970487e3af4f5aa5bca3f542482c60/jdk-8u201-linux-x64.tar.gz  解压jdk压缩包，使用命令 tar -zxvf 文件名
然后配置环境变量，主要编辑以下两个文件
vi /etc/environment vi /etc/profile  最后使用java -version查看版本信息
第二步：mysql的安装 1.下载mysql ，以5.7为例
sudo wget https://cdn.mysql.com//Downloads/MySQL-5.7/mysql-5.7.25-linux-glibc2.12-x86_64.tar.gz # 解压 tar -zxvf mysql-5.7.25-linux-glibc2.12-x86_64.tar.gz  2.移动 文件到 /usr/local/
重命名 mv 文件名 mysql
3.新建data目录 mkdir data
4.新建mysql用户、mysql用户组
mysql用户组
groupadd mysql  mysql用户
useradd mysql -g mysql  5.将/usr/local/mysql的所有者及所属组改为mysql</description>
    </item>
    
  </channel>
</rss>