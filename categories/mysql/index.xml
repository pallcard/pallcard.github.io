<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Mysql on 刘科个人博客</title>
    <link>https://pallcard.github.io/categories/mysql/</link>
    <description>Recent content in Mysql on 刘科个人博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <copyright>All rights reserved - 2019</copyright>
    <lastBuildDate>Sat, 29 Feb 2020 21:03:40 +0800</lastBuildDate>
    
	<atom:link href="https://pallcard.github.io/categories/mysql/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Mysql多表查询</title>
      <link>https://pallcard.github.io/2020/mysql%E5%A4%9A%E8%A1%A8%E6%9F%A5%E8%AF%A2/</link>
      <pubDate>Sat, 29 Feb 2020 21:03:40 +0800</pubDate>
      
      <guid>https://pallcard.github.io/2020/mysql%E5%A4%9A%E8%A1%A8%E6%9F%A5%E8%AF%A2/</guid>
      <description>Mysql多表查询 举例分析 说明:表格仅为举例说明 tb_user_age |id|age| |-|-| |1|10| |2|11| |3|12| |4|13| tb_user_name |id|age| |-|-| |2|zhang| |3|li| |4|zhou| |5|chen|
create table tb_user_age ( id bigint auto_increment comment &#39;ID&#39; primary key, age int null comment &#39;年龄&#39; ) comment = &#39;用户年龄&#39; engine = innodb charset utf8mb4; create table tb_user_name ( id bigint auto_increment comment &#39;ID&#39; primary key, name varchar(30) null comment &#39;姓名&#39; ) comment = &#39;用户姓名&#39; engine = innodb charset utf8mb4; insert into tb_user_age (age) values (10),(11),(12),(13); insert into tb_user_name (id,name) values (2,&#39;zhang&#39;),(3,&#39;li&#39;),(4,&#39;zhou&#39;),(5,&#39;chen&#39;);  内连接 （join 或 inner join） select a.</description>
    </item>
    
    <item>
      <title>Mysql之explain</title>
      <link>https://pallcard.github.io/2020/mysql%E4%B9%8Bexplain/</link>
      <pubDate>Fri, 28 Feb 2020 22:01:03 +0800</pubDate>
      
      <guid>https://pallcard.github.io/2020/mysql%E4%B9%8Bexplain/</guid>
      <description>Mysql之explain 用法 # explain sql语句 explain select * from TB_ORDER  结果： |id|select_type|table|partitions|type|posssible_keys|key|key_len|ref|rows|filtered|Extra| |-|-|-|-|-|-|-|-|-|-|-|-| |1|SIMPLE|TB_ORDER||ALL|||||1794|100|
字段说明 id SQL执行的顺序的标识,SQL从大到小的执行 * id相同时，执行顺序由上至下 * 如果是子查询，id的序号会递增，id值越大优先级越高，越先被执行 * id如果相同，可以认为是一组，从上往下顺序执行；在所有组中，id值越大，优先级越高，越先执行
select_type 查询中每个select子句的类型
 SIMPLE(简单SELECT,不使用UNION或子查询等) PRIMARY(查询中若包含任何复杂的子部分,最外层的select被标记为PRIMARY) UNION(UNION中的第二个或后面的SELECT语句) DEPENDENT UNION(UNION中的第二个或后面的SELECT语句，取决于外面的查询) UNION RESULT(UNION的结果) SUBQUERY(子查询中的第一个SELECT) DEPENDENT SUBQUERY(子查询中的第一个SELECT，取决于外面的查询) DERIVED(派生表的SELECT, FROM子句的子查询) UNCACHEABLE SUBQUERY(一个子查询的结果不能被缓存，必须重新评估外链接的第一行)  table 显示这一行的数据是关于哪张表的，有时不是真实的表名字,看到的是derivedx(x是个数字,我的理解是第几步执行的结果)
type 表示MySQL在表中找到所需行的方式，又称“访问类型”。常用的类型有： ALL, index, range, ref, eq_ref, const, system, NULL（从左到右，性能从差到好）
 ALL：Full Table Scan， MySQL将遍历全表以找到匹配的行
 index: Full Index Scan，index与ALL区别为index类型只遍历索引树
 range:只检索给定范围的行，使用一个索引来选择行
 ref: 表示上述表的连接匹配条件，即哪些列或常量被用于查找索引列上的值</description>
    </item>
    
    <item>
      <title>数据库事务</title>
      <link>https://pallcard.github.io/2019/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BA%8B%E5%8A%A1/</link>
      <pubDate>Thu, 08 Aug 2019 21:58:38 +0800</pubDate>
      
      <guid>https://pallcard.github.io/2019/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BA%8B%E5%8A%A1/</guid>
      <description>事务特性 ACID：原子性、一致性、隔离性、持久性
 原子性：一个事务要么全部成功，要么全部失败 一致性：事务提交前后，数据库保持一致性状态 隔离性：一个事务所做的修改，其他事务不可见 持久性：事务一旦提交，所做修改永久保存到数据库中  关系：
原子性 + 隔离性 ---&amp;gt; 一致性 ---&amp;gt; 结果正确 持久性 ----&amp;gt; 应对数据库崩溃  并发一致性 当多个事务并发执行时会导致事务不能保证一致性，导致结果出错。
丢失修改、读脏数据、不可重复读、幻读
 丢失修改：对于同一数据，T1 修改数据后，T2 又修改数据，T1修改读数据被覆盖 读脏数据：T1修改数据后，T2读该数据，T1又回滚数据，T2读脏数据 不可重复读：T1读数据后，T2对该数据进行修改，T1再读该数据，读得的数据值不一致 幻读：T1读数据（例如count统计表中行数），T2插入一行数据，导致数据不一致  三级封锁协议  一级封锁：当更新数据时，立即加X锁，直到事务结束。 ==&amp;gt; 解决了丢失修改 二级封锁：在1上，当读数据时，立即加S锁，读完立即释放锁。 ==&amp;gt; 解决了读脏数据 三级封锁：在2上，当读数据时，立即加S锁，直到事务结束。 ==&amp;gt; 解决了不可重复读  两段锁协议 加锁和解锁分成两个阶段。一个阶段加锁，一个阶段解锁。保证可串行性化调度。
隔离级别  未提交读：事务的修改未提交前，其他事务可见 读：不加锁； 更新 ： 行级共享锁 提交读： 事务的修改在未提交前，其他事务不可见 读：行级共享锁； 更新： 行级排他锁 可重复读： 一个事务中的多次读结果一致 读：行级共享锁； 更新：行级排他锁 可串行化：事务串行执行 读：表级共享锁； 更新：表级排他锁  解决的问题
   隔离级别 脏读 不可重复读 幻读     未提交读 - - -   提交读  - -   可重复读   -   可串行化       mysql事务隔离级别的实现 MVCC（多版本并发控制）  版本号  1.</description>
    </item>
    
    <item>
      <title>Mysql题</title>
      <link>https://pallcard.github.io/2019/mysql%E9%A2%98/</link>
      <pubDate>Sat, 01 Jun 2019 18:52:16 +0800</pubDate>
      
      <guid>https://pallcard.github.io/2019/mysql%E9%A2%98/</guid>
      <description>1.左连接、右连接、内连接 左连接 以左表为基础，根据on后面的条件进行连接，若右表中无对应数据，则右表数据为NULL。
右连接 以右表为基础，根据on后面的条件进行连接，若左表中无对应数据，则左表数据为NULL。
内连接 两个表做笛卡尔积后根据on后面的条件进行筛选。</description>
    </item>
    
    <item>
      <title>Mysql基础</title>
      <link>https://pallcard.github.io/2019/mysql%E5%9F%BA%E7%A1%80/</link>
      <pubDate>Mon, 27 May 2019 18:56:26 +0800</pubDate>
      
      <guid>https://pallcard.github.io/2019/mysql%E5%9F%BA%E7%A1%80/</guid>
      <description>DBMS分类  基于共享文件系统的DBMS，例如：Microsoft Access 基于客户机—服务器的DBMS，例如：MySql，Oracle，SQL Server  连接mysql 格式：
mysql -h 主机地址 -u 用户名 -p 用户密码 例如：/usr/local/mysql/bin/mysql -u root -p  选择数据库 最初连接mysql时，没有任何数据库可供使用，需要使用use来选择一个数据库
use 数据库名称 例如：USE mysql  显示数据库一些信息 SHOW DATABASES; //显示所有数据库 SHOW TABLES; //显示当前数据库中所有表 SHOW COLUMNS FROM xxx; //显示xxx表中的列 DESCRIBE xxx；//同上 SHOW STATUS; //用于显示广泛的服务器状态信息 SHOW GRANTS; //显示授权用户权限 SHOW ERRORS和SHOW WARNINGS；//用来显示服务器错误或警告消息  检索数据 许多SQL开发人员喜欢对所有SQL关键字使用大写，而对所有 列和表名使用小写，这样做使代码更易于阅读和调试。
select SELECT DISTINCT yyy FROM xxx LIMIT 5; //检索xxx表中yyy列(DISTINCT去重，不多于5) SELECT * FROM xxx LIMIT 5, 5; //从第5行开始5行，下标0  注 DITINCT会作用于所有的列，不会部分使用</description>
    </item>
    
  </channel>
</rss>